version: '3.4'

networks:
  demo:
    driver: bridge
    
services:
  emails:
    image: ${PROJECT_NAME}.emails.worker
    container_name: ${PROJECT_NAME}.emails.worker
    build:
      context: .
      dockerfile: Demo.Emails.Worker/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNET_ENV}
      - RabbitMQCluster__Cluster=${RABBITMQ_CLUSTER}
      - RabbitMQCluster__Hosts__0=${RABBITMQ_HOSTS}
      - EmailOptions__Smtp=${EMAIL_SMTP}
      - EmailOptions__Port=${EMAIL_PORT}
      - EmailOptions__UserName=${EMAIL_USERNAME}
      - EmailOptions__Password=${EMAIL_PASSWORD}
      - EmailOptions__EmaiFrom=${EMAIL_FROM}
      - EmailOptions__EnableSsl=${EMAIL_USE_SSL}
    networks:
      - demo
    depends_on:
      - rabbitmq

  payment:
    image: ${PROJECT_NAME}.payment.api
    container_name: ${PROJECT_NAME}.payment.api
    build:
      context: .
      dockerfile: Demo.Payments.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNET_ENV}
      - RabbitMQCluster__Cluster=${RABBITMQ_CLUSTER}
      - RabbitMQCluster__Hosts__0=${RABBITMQ_HOSTS}
      - PaymentProviderOptions__Url=${PAYMENT_PROVIDER_URL}
      - AWS__AccessKey=${AWS_ACCESS_KEY_ID}
      - AWS__SecretKey=${AWS_SECRET_ACCESS_KEY}
      - AWS__ServiceURL=${AWS_SERVICE_URL}
    networks:
      - demo
    depends_on:
      - rabbitmq

  catalog:
    image: ${PROJECT_NAME}.catalog.api
    container_name: ${PROJECT_NAME}.catalog.api
    build:
      context: .
      dockerfile: Demo.ProductCatalog.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNET_ENV}
      - RabbitMQCluster__Cluster=${RABBITMQ_CLUSTER}
      - RabbitMQCluster__Hosts__0=${RABBITMQ_HOSTS}
      - RedisConfig__ConnectionString=${REDIS_CONNECTION}
      - MongoConfig__ConnectionString=${MONGO_CONNECTION}
    ports:
      - 7143:80
    networks:
      - demo
    depends_on:
      - rabbitmq

  stock:
    image: ${PROJECT_NAME}.stock.api
    container_name: ${PROJECT_NAME}.stock.api
    build:
      context: .
      dockerfile: Demo.ProductStock.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNET_ENV}
      - RabbitMQCluster__Cluster=${RABBITMQ_CLUSTER}
      - RabbitMQCluster__Hosts__0=${RABBITMQ_HOSTS}
      - SQL_SERVER_SA_PASSWORD
      - ConnectionStrings__DefaultConnection=${SQLSERVER_CONNECTION}
      - LogisticProviderOptions__Url=${LOGISTIC_PROVIDER_URL}
    ports:
      - 7235:80
    networks:
      - demo
    depends_on:
      - rabbitmq
    
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ${PROJECT_NAME}.rabbitmq
    ports:
      - 15672:15672
      - 5672:5672
    networks:
      - demo

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2017-CU20-ubuntu-16.04
    container_name: ${PROJECT_NAME}.sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SQL_SERVER_SA_PASSWORD}
    ports:
      - 1433:1433
    networks:
      - demo

  mongodb:
    image: mongo:latest
    container_name: ${PROJECT_NAME}.mongodb
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONOG_PASSWORD}    
    networks:
      - demo

  redis:    
    image: redis
    container_name: ${PROJECT_NAME}.redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_REPLICATION_MODE=master    
    networks:
      - demo

  dynamodb:
    image: amazon/dynamodb-local
    container_name: ${PROJECT_NAME}.dynamodb
    ports:
      - "8000:8000"
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    networks:
      - demo

  dynamodb-admin:
    depends_on: 
      - dynamodb
    image: leandroalves86/dynamodb-admin:1.0.0
    container_name: ${PROJECT_NAME}.dynamodb-admin
    ports:
      - 8001:8001
    environment:
      DYNAMO_ENDPOINT: http://dynamodb:8000
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    networks:
      - demo

  external-providers-mock:
    image: natenho/mockaco
    container_name: ${PROJECT_NAME}.mock.external-payment
    ports:
      - 8321:5000
    volumes:
      - ../mocks:/app/Mocks:ro
    networks:
      - demo